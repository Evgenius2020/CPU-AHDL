include "acc.inc";
include "alu.inc";
include "ir.inc";
include "ram.inc";

subdesign cu
(
	clk: input;
	acco[0..7]: output;
	ramo[0..7]: output;
	cmdo[0..2]: output;
	ipo[0..7]: output;
	argo[0..4]: output;
)
variable
	cumach : MACHINE WITH STATES (
		S_INIT, 
		S_RECEIVE_INSTRUCTION, 
		S_PARSE_INSTRUCTION,
		S_MOVE_PTR,
		S_EXECUTION_PRELOAD,
		S_EXECUTION,
		S_WAIT
	);
	cmd[0..2]: dffe;
	arg[0..4]: dffe;
	iri: ir;
	ipi: acc;
	acci: acc;
	rami: ram;
	alui: alu;
begin
	arg[].clk = clk;
	acci.clk = clk;
	cmd[].clk = clk;
	cumach.clk = clk;
	cumach.reset = gnd;
	ipi.clk = clk;
	rami.clk = clk;
	acci.we = gnd;
	ipi.we = gnd;
	rami.we = gnd;
	cmd[].ena = gnd;
	arg[].ena = gnd;

	case cumach is
		when S_INIT =>
			acci.we = vcc;
			ipi.we = vcc;
			acci.in[] = 0;			
			ipi.in[] = 0;
			cumach = S_RECEIVE_INSTRUCTION;
		when S_RECEIVE_INSTRUCTION =>
			rami.addr[] = ipi.out[];
			cumach = S_PARSE_INSTRUCTION;
		when S_PARSE_INSTRUCTION =>
			iri.in[] = rami.out[];
			cmd[].ena = vcc;
			arg[].ena = vcc;
			cmd[] = iri.cmd[];
			arg[] = iri.arg[];
			if (iri.cmd[] == 0) then
				cumach = S_MOVE_PTR;
			else
				cumach = S_EXECUTION_PRELOAD;
			end if;
		when S_MOVE_PTR =>
			cmd[].ena = vcc;
			arg[].ena = vcc;
			cmd[] = 0;			
			arg[] = 0;
			ipi.we = vcc;
			ipi.in[] = ipi.out[] + 1;
			cumach = S_RECEIVE_INSTRUCTION;
		when S_EXECUTION_PRELOAD =>
			if (cmd[] <= 4) then
				rami.addr[] = (0, arg[]);
			end if;
			cumach = S_EXECUTION;			
		when S_EXECUTION =>
			if (cmd[] == 1 or cmd[] == 2) then --add|sub
				alui.cmd[] = cmd[];
				alui.a[] = acci.out[];
				alui.b[] = rami.out[];
				acci.we = vcc;
				acci.in[] = alui.out[];
			end if;
			if (cmd[] == 3) then --load
				acci.we = vcc;
				acci.in[] = rami.out[];				
			end if; 
			if (cmd[] == 4) then --store
				rami.data[] = acci.out[];
				rami.addr[] = (0, arg[]);
				rami.we = vcc;		
			end if;
			if (cmd[] == 5) then --set
				acci.we = vcc;
				acci.in[] = (0, arg[].q);
			end if;
			if (cmd[] == 6) then --jmp
				ipi.we = vcc;
				ipi.in[] = (0, arg[]);
			end if;
			if (cmd[] == 7) then --jz
				if (acci.out[] == 0) then
					ipi.we = vcc;
					ipi.in[] = (0, arg[]);
				end if;
			end if;
			if (cmd[] == 4) then
				cumach = S_WAIT;
			else 
				cumach = S_MOVE_PTR;			
			end if;
		when S_WAIT =>
			rami.addr[] = (0, arg[]);
			rami.data[] = acci.out[];			
			rami.we = gnd;
			cumach = S_MOVE_PTR; 
	end case;

	acco[] = acci.out[];
	ramo[] = rami.out[];
	argo[] = arg[];
	ipo[] = ipi.out[];
	cmdo[] = cmd[];
end;

--obko@mail.ru
